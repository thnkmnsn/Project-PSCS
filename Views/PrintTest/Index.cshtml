@model PSCS.ModelsScreen.PrintTestScreen

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h1 class="H1">My Print Test</h1>

<!DOCTYPE html>

<html>
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="An online ZPL viewer that allows you to easily edit and preview ZPL labels.">
    <title>Labelary Online ZPL Viewer</title>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">

    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

    <!-- Custom styling -->
    <style type="text/css">
        div.pull-left {
            padding-right: 1em;
        }
    </style>

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
        ga('create', 'UA-50317107-1', 'labelary.com');
        ga('send', 'pageview');
    </script>

</head>
<body>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

    <div class="container">

        <style scoped>
            #zpl {
                width: 100%;
            }

            #label {
                max-width: 400px;
                max-height: 600px;
                border: 1px solid darkgray;
            }

            .controls {
                margin-top: 1em;
            }

                .controls > * {
                    margin-bottom: 1em;
                }

                .controls > label,
                .controls > select,
                .controls > input,
                .controls > span {
                    margin-right: 1em;
                }

                .controls label.aligned {
                    display: inline-block;
                    width: 7em;
                }

            .note {
                font-style: italic;
            }

            input[type="number"] {
                width: 5em;
            }

            input[type="file"] {
                display: none;
            }

            #version {
                margin-bottom: 1em;
                margin-top: 1em;
                text-align: center;
                font-size: 8pt;
                color: gray;
            }
        </style>

        <div class="row">
            <div class="col-md-12">
                <h2>Online ZPL Viewer</h2>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <form>
                    <textarea id="zpl" cols="80" rows="25" spellcheck="false">

^XA
^LH20,0
^FO130,35
^ASN
^FD^FS
^FO400,30
^ATN
^FDJan-2019^FS
^FO130,85
^ASN
^FDJIANGYIN^FS
^FO30,140
^AUN
^FD273 X 20.4 X 6730^FS
^FO30,205
^AUN
^FD19302460       ^FS
^FO30,45
^BXN,3,200
^FDMC311E-2730020406730-4319302460       201901010000^FS
^XZ
</textarea>
                    <div class="controls">
                        <button type="button" class="btn btn-default" id="redraw"><i class="fa fa-pencil-square-o"></i> Redraw</button>
                        <button type="button" class="btn btn-default" id="addImage"><i class="fa fa-picture-o"></i> Add image</button>
                        <button type="button" class="btn btn-default" id="rotate"><i class="fa fa-rotate-right"></i> Rotate</button>
                        <a class="btn btn-default" id="permalink" href=""><i class="fa fa-link"></i> Permalink</a>
                        <button type="button" class="btn btn-default" id="openFile"><i class="fa fa-folder-open-o"></i> Open file</button>
                        <br>
                        <label for="density" class="aligned">Print Density:</label>
                        <select name="density" id="density">
                            <option value="6">6 dpmm (152 dpi)</option>
                            <option value="8" selected>8 dpmm (203 dpi)</option>
                            <option value="12">12 dpmm (300 dpi)</option>
                            <option value="24">24 dpmm (600 dpi)</option>
                        </select>
                        <br>
                        <label for="width" class="aligned">Label Size:</label>
                        <input type="number" placeholder="width" min="1" step="any" required="required" name="width" id="width" value="4">
                        <span>x</span>
                        <input type="number" placeholder="height" min="1" step="any" required="required" name="height" id="height" value="6">
                        <select name="units" id="units">
                            <option value="1" selected>inches</option>
                            <option value="0.393701">cm</option>
                            <option value="0.0393701">mm</option>
                        </select>
                        <br>
                        <label for="index" class="aligned">Show Label:</label>
                        <input type="number" placeholder="index" min="0" max="0" step="1" required="required" name="index" id="index" value="0">
                        <span class="note">(0 = first label, 1 = second label, etc.)</span>
                        <br>
                        <label>Labels Available:</label>
                        <span id="total">1</span>
                        <input type="file" id="imageFile" accept="image/*">
                        <input type="file" id="zplFile">
                    </div>
                </form>
            </div>
            <div class="col-md-6">
                <img id="label" alt="Label">
                <div id="error" style="display:none"></div>
                <div class="controls">
                    <button type="button" class="btn btn-default" id="downloadZpl"><i class="fa fa-cloud-download"></i> ZPL</button>
                    <button type="button" class="btn btn-default" id="downloadPng"><i class="fa fa-cloud-download"></i> PNG</button>
                    <button type="button" class="btn btn-default" id="downloadPdf"><i class="fa fa-cloud-download"></i> PDF</button>
                    <button type="button" class="btn btn-default" id="downloadPdfAll"><i class="fa fa-cloud-download"></i> Multi-Label PDF</button>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12" id="version"></div>
        </div>

        <script>

            const ERROR_DOWN_FOR_MAINTENANCE = "ERROR: Temporarily down for maintenance";

            function refreshVersion() {
                $.ajax({
                    url: 'http://api.labelary.com/version',
                    success: function (data) {
                        $('#version').text('Powered by Labelary API version ' + data);
                    }
                });
            }

            function rotateLabel() {
                setRotation(getRotation() + 90);
            }

            function setRotation(rotation, duration) {

                if (duration == null) {
                    duration = 0.5;
                }

                var label = document.getElementById('label');
                var maxWidth = (rotation % 180 == 0 ? 400 : 600);
                var maxHeight = (rotation % 180 == 0 ? 600 : 400);

                var x, y;
                if (rotation % 360 == 90) {
                    x = '0';
                    y = '-100%';
                } else if (rotation % 360 == 180) {
                    x = '100%';
                    y = '-100%';
                } else if (rotation % 360 == 270) {
                    // this is the only case where the translation coordinates are based on the new image size computed
                    // by the browser (based on the image max width and max height), rather than the old image size; note
                    // also that the use of naturalWidth and naturalHeight requires that the image has already been
                    // loaded before this method is called, or these two attributes will not be available
                    var widthFactor = maxWidth / label.naturalWidth;
                    var heightFactor = maxHeight / label.naturalHeight;
                    var factor = Math.min(widthFactor, heightFactor);
                    x = (label.naturalHeight * factor) + 'px';
                    y = ((label.naturalWidth - label.naturalHeight) * factor) + 'px';
                } else {
                    x = '0';
                    y = '0';
                }

                label.style.transition = duration + 's ease-in-out';
                label.style.transformOrigin = 'left bottom';
                label.style.transform = 'translateX(' + x + ') translateY(' + y + ') rotate(' + rotation + 'deg)';
                label.style.maxWidth = maxWidth + 'px';
                label.style.maxHeight = maxHeight + 'px';
            }

            function getRotation() {
                var label = document.getElementById('label');
                var transform = label.style.transform || 'rotate(0deg)';
                var matches = transform.match(/rotate\((\d+)\.?\d*deg\)/); // ignore decimals that IE inexplicably adds sometimes...
                return (matches && matches.length == 2 ? parseInt(matches[1]) : 0);
            }

            function refreshLabel() {
                submitLabelRequest(false, false, function (xhr) {
                    if (xhr.readyState == 4) {
                        var totalCountHeader = xhr.getResponseHeader('X-Total-Count'); // received with all 200s and with some 404s
                        if (xhr.status == 200) {
                            var label = document.getElementById('label');
                            var wurl = window.URL || window.webkitURL;
                            wurl.revokeObjectURL(label.src);
                            label.src = wurl.createObjectURL(xhr.response);
                            labelDone(totalCountHeader);
                        } else if (xhr.status >= 400 && xhr.status <= 599) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                labelDone(totalCountHeader, reader.result);
                            };
                            reader.readAsText(xhr.response);
                        } else if (xhr.status == 0) {
                            // if the Labelary API server is down, the API gateway that sits in front of it will return a valid HTTP
                            // error code, e.g. 404; however, the API gateway isn't configured for CORS, which means that the HTTP
                            // error response comes back without the requisite "Access-Control-Allow-Origin" header, in which case
                            // from the perspective of this code we see a response with readyState = 4 but status = 0...
                            // http://broadcast.oreilly.com/2010/04/ajax-readystate-is-4-but-statu.html
                            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status
                            labelDone(0, ERROR_DOWN_FOR_MAINTENANCE);
                        }
                    }
                });
            }

            function submitLabelRequest(pdf, all, orsc) {

                var zpl = $('#zpl').val();
                var uzpl = zpl.toUpperCase();
                if (uzpl.indexOf('^XA') == -1 && uzpl.indexOf('\x02') == -1) {
                    // no need to even hit the server to get the 404 error...
                    labelDone('0', 'ERROR: The ZPL is missing a starting ^XA command.');
                    return;
                } else if (uzpl.indexOf('^XZ') == -1 && uzpl.indexOf('\x03') == -1) {
                    // no need to even hit the server to get the 404 error...
                    labelDone('0', 'ERROR: The ZPL is missing an ending ^XZ command.');
                    return;
                }

                var density = $('#density').val();
                var width = $('#width').val() * $('#units').val();
                var height = $('#height').val() * $('#units').val();
                var index = $('#index').val();
                var baseUrl = 'http://api.labelary.com/v1/printers/' + density + 'dpmm/labels/' + width + 'x' + height + '/';
                if (!pdf || !all) {
                    baseUrl += index + '/';
                }

                // use a POST request so that the ZPL is never truncated, regardless of length
                // http://www.html5rocks.com/en/tutorials/file/xhr2/
                // http://www.henryalgus.com/reading-binary-files-using-jquery-ajax/
                var formData = new FormData();
                formData.append('file', zpl);
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () { orsc(this) };
                xhr.open('POST', baseUrl);
                xhr.setRequestHeader('Accept', pdf ? 'application/pdf' : 'image/png');
                xhr.responseType = 'blob';
                xhr.send(formData);
            }

            function labelDone(totalCountHeader, errorMessage) {
                var error = document.getElementById('error');
                var label = document.getElementById('label');
                error.innerHTML = errorMessage;
                error.style.display = (errorMessage ? 'block' : 'none');
                label.style.display = (errorMessage ? 'none' : 'block');
                if (!errorMessage) {
                    var rotation = getRotation();
                    if (rotation % 360 == 270) {
                        // refresh the label CSS transform (necessary if rotation = 270 and label dimensions have changed)
                        // duration = 0 because the user didn't explicitly rotate the label, so we don't want to animate it
                        setRotation(rotation, 0);
                    }
                }
                var index = document.getElementById('index');
                var total = document.getElementById('total');
                index.max = Math.max((totalCountHeader ? parseInt(totalCountHeader) - 1 : 0), 0);
                total.innerHTML = totalCountHeader;
            }

            function refreshPermalink() {
                var density = $('#density').val();
                var width = $('#width').val();
                var height = $('#height').val();
                var units = $('#units option:selected').text();
                var index = $('#index').val();
                var zpl = encodeURIComponent($('#zpl').val());
                $('#permalink').attr('href', '?density=' + density +
                    '&width=' + width +
                    '&height=' + height +
                    '&units=' + units +
                    '&index=' + index +
                    '&zpl=' + zpl);
            }

            function setSelectionRange(input, selectionStart, selectionEnd) {
                if (input.setSelectionRange) {
                    input.focus();
                    input.setSelectionRange(selectionStart, selectionEnd);
                } else if (input.createTextRange) {
                    var range = input.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', selectionEnd);
                    range.moveStart('character', selectionStart);
                    range.select();
                }
            }

            // http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
            function getParameterByName(name) {
                name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
                var results = regex.exec(location.search);
                return results == null ? null : decodeURIComponent(results[1].replace(/\+/g, ' '));
            }

            // http://stackoverflow.com/questions/166221/how-can-i-upload-files-asynchronously-with-jquery
            function uploadImage() {
                var formData = new FormData();
                formData.append('file', $('#imageFile')[0].files[0]);
                $.ajax({
                    url: 'http://api.labelary.com/v1/graphics',
                    headers: { Accept: 'application/json' },
                    type: 'POST',
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        var zpl = $('#zpl').val();
                        var index = zpl.toUpperCase().indexOf('^XA');
                        var cmd =
                            '\n'
                            + '\n'
                            + '^FO50,50^GFA,' + data.totalBytes + ',' + data.totalBytes + ',' + data.rowBytes + ',' + data.data + '^FS\n'
                            + '\n'
                            + '\n';
                        if (index == -1) {
                            zpl = cmd + zpl;
                        } else {
                            zpl = zpl.substring(0, index + 3) + cmd + zpl.substring(index + 3);
                        }
                        $('#zpl').val(zpl);
                        refreshLabel();
                        refreshPermalink();
                    },
                    error: function (jqxhr) {
                        alert(jqxhr.responseText);
                    }
                });
            }

            function loadZpl() {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#zpl').val(reader.result);
                    refreshLabel();
                    refreshPermalink();
                };
                var file = $('#zplFile')[0].files[0];
                reader.readAsText(file);
            }

            function downloadZpl() {
                var zpl = document.getElementById('zpl');
                var wurl = window.URL || window.webkitURL;
                var blob = new Blob([zpl.value], { type: 'application/zpl' });
                var url = wurl.createObjectURL(blob);
                triggerDownload(url, 'label.zpl');
                wurl.revokeObjectURL(url);
            }

            function downloadPng() {
                var label = document.getElementById('label');
                if (label && label.src) {
                    triggerDownload(label.src, 'label.png');
                }
            }

            function downloadPdf() {
                downloadPdfPlease(false);
            }

            function downloadPdfAll() {
                downloadPdfPlease(true);
            }

            function downloadPdfPlease(all) {
                submitLabelRequest(true, all, function (xhr) {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            var wurl = window.URL || window.webkitURL;
                            var url = wurl.createObjectURL(xhr.response);
                            var filename = all ? 'labels.pdf' : 'label.pdf';
                            triggerDownload(url, filename);
                            wurl.revokeObjectURL(url);
                        } else if (xhr.status >= 400 && xhr.status <= 599) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                showDownloadError(reader.result);
                            };
                            reader.readAsText(xhr.response);
                        } else if (xhr.status == 0) {
                            // see note in refreshLabel() for details on when this might happen
                            showDownloadError(ERROR_DOWN_FOR_MAINTENANCE);
                        }
                    }
                });
            }

            function showDownloadError(errorMessage) {
                if (errorMessage) {
                    alert(errorMessage);
                }
            }

            function triggerDownload(url, filename) {
                var a = document.createElement('a');
                a.href = url;
                a.download = filename;
                a.style = 'display: none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            }

            function track(event) {
                ga('send', 'event', 'Viewer', event.data.action);
            }

            // http://stackoverflow.com/questions/572768/styling-an-input-type-file-button
            $('#addImage').on('click', function () { $('#imageFile').click(); });
            $('#openFile').on('click', function () { $('#zplFile').click(); });
            $('#imageFile').on('change', uploadImage).on('change', { action: 'Add Image' }, track);
            $('#zplFile').on('change', loadZpl).on('change', { action: 'Open File' }, track);
            $('#zpl').on('change keyup paste', refreshPermalink);
            $('#rotate').on('click', rotateLabel).on('click', { action: 'Rotate' }, track);
            $('#redraw').on('click', refreshLabel).on('click', { action: 'Redraw' }, track);
            $('#density').on('change', refreshLabel).on('change', refreshPermalink).on('change', { action: 'Change Density' }, track);
            $('#width').on('change', refreshLabel).on('change', refreshPermalink).on('change', { action: 'Change Width' }, track);
            $('#height').on('change', refreshLabel).on('change', refreshPermalink).on('change', { action: 'Change Height' }, track);
            $('#units').on('change', refreshLabel).on('change', refreshPermalink).on('change', { action: 'Change Units' }, track);
            $('#index').on('change', refreshLabel).on('change', refreshPermalink).on('change', { action: 'Change Index' }, track);
            $('#downloadZpl').on('click', downloadZpl).on('click', { action: 'Download ZPL' }, track);
            $('#downloadPng').on('click', downloadPng).on('click', { action: 'Download PNG' }, track);
            $('#downloadPdf').on('click', downloadPdf).on('click', { action: 'Download PDF' }, track);
            $('#downloadPdfAll').on('click', downloadPdfAll).on('click', { action: 'Download PDF All' }, track);

            $(document).ready(function () {

                var zpl = getParameterByName('zpl');
                if (zpl) {
                    // custom ZPL requested via query string
                    $('#zpl').val(zpl);
                } else {
                    // select recipient name in standard sample ZPL, if it's there
                    var input = document.getElementById('zpl');
                    var index = input.value.indexOf('John Doe');
                    if (index >= 0) {
                        setSelectionRange(input, 414, 422);
                    }
                }

                var density = getParameterByName('density');
                if (density) {
                    // custom print density requested via query string
                    $('#density').val(density);
                }

                var width = getParameterByName('width');
                if (width) {
                    // custom width requested via query string
                    $('#width').val(width);
                }

                var height = getParameterByName('height');
                if (height) {
                    // custom height requested via query string
                    $('#height').val(height);
                }

                var units = getParameterByName('units');
                if (units) {
                    // custom label size units requested via query string
                    $('#units option').filter(function () { return $(this).html() == units; }).prop('selected', true);
                }

                var index = getParameterByName('index');
                if (index) {
                    // custom label index requested via query string
                    $('#index').val(index);
                }

                refreshLabel();
                refreshPermalink();
                refreshVersion();
            });

        </script>
    </div>

    @using (Html.BeginForm("Index", "PrintTest", FormMethod.Post))
    {
        <table border="0" cellSpacing="0" cellPadding="0" width="100%">
            <tr>
                <td>
                    <div class="details @(@Model.AlertsType == PSCS.Common.Constants.AlertsType.None ? "hide" : @Model.AlertsType == PSCS.Common.Constants.AlertsType.Success ? "show alert alert-success" : @Model.AlertsType == PSCS.Common.Constants.AlertsType.Infomation ? "show alert alert-info" : @Model.AlertsType == PSCS.Common.Constants.AlertsType.Warning ? "show alert alert-warning" : @Model.AlertsType == PSCS.Common.Constants.AlertsType.Danger ? "show alert alert-danger" : "hide")" )>
                        @if (Model.AlertsType == PSCS.Common.Constants.AlertsType.Success)
                        {<strong>@PSCS.Resources.Common_cshtml.Success</strong>}
                        @if (Model.AlertsType == PSCS.Common.Constants.AlertsType.Infomation)
                        {<strong>@PSCS.Resources.Common_cshtml.Information</strong>}
                        @if (Model.AlertsType == PSCS.Common.Constants.AlertsType.Warning)
                        {<strong>@PSCS.Resources.Common_cshtml.Warning</strong>}
                        @if (Model.AlertsType == PSCS.Common.Constants.AlertsType.Danger)
                        {<strong>@PSCS.Resources.Common_cshtml.Error</strong>}
                        <label calss="field-validation-error">@Html.DisplayFor(model => model.Message)</label>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                    <table align="right">
                        <tr>
                            <th>
                                <Button id="btnPrint" name="submitButton" value="Print" class="btn btn-primary btn-large btnCustom5">Print</Button>
                                <Button class="btn btn-large btn-skyblue" id="btnExport" formaction="Export">Export</Button>
                            </th>
                        </tr>
                        <tr>
                            <th>
                                @if (ViewBag.BarcodeImage != null)
                                {
                                    <img src="@ViewBag.BarcodeImage" alt="" />
                                }
                            </th>
                        </tr>

                    </table>
                </th>
            </tr>
            <tr>
                <th>
                    <table border="0" cellSpacing="0" cellPadding="0">
                        <tr>
                            <th>
                                <table border="0" cellSpacing="0" cellPadding="0">
                                    <tr>
                                        <th width="70px">
                                            <label class="textbox-caption">Input Printer </label>
                                        </th>
                                        <th width="400px">
                                            @Html.TextBoxFor(m => m.InputPrinter, new { @style = "height:25px; width:400px;" })
                                        </th>

                                    </tr>
                                    <tr>
                                        <th width="70px">
                                            <label class="textbox-caption">Printer </label>
                                        </th>
                                        <th width="140px">
                                            @Html.DropDownListFor(m => m.FilterPrinter, Model.PrinterList, "All", new { @style = "height:25px; width:300px;" })
                                        </th>
                                    </tr>

                                </table>
                            </th>

                        </tr>
                    </table>
                </th>
            </tr>
        </table>
    }
</body>
</html>

